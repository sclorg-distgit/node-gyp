From 6de79d3d2b661b25b99d4deb9c5792ee626b835d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tom=C3=A1=C5=A1=20Hr=C4=8Dka?= <thrcka@redhat.com>
Date: Thu, 29 Jan 2015 15:26:54 +0100
Subject: [PATCH] use custom addon.gypi by default instead of downloading node
 back port of original patch
 http://pkgs.fedoraproject.org/cgit/node-gyp.git/tree/node-gyp-addon-gypi.patch

---
 lib/configure.js | 46 +++++++++++++++++++++++-----------------------
 1 file changed, 23 insertions(+), 23 deletions(-)

diff --git a/lib/configure.js b/lib/configure.js
index 6f4fd40..1a003c4 100644
--- a/lib/configure.js
+++ b/lib/configure.js
@@ -131,30 +131,29 @@ function configure (gyp, argv, callback) {
         // if --target was given, then determine a target version to compile for
         versionStr = gyp.opts.target
         log.verbose('get node dir', 'compiling against --target node version: %s', versionStr)
+	// make sure we have a valid version
+	try {
+	    version = semver.parse(versionStr)
+	} catch (e) {
+	    return callback(e)
+	}
+	if (!version) {
+	    return callback(new Error('Invalid version number: ' + versionStr))
+	}
+	// ensure that the target node version's dev files are installed
+	gyp.opts.ensure = true
+	gyp.commands.install([ versionStr ], function (err, version) {
+	    if (err) return callback(err)
+	    log.verbose('get node dir', 'target node version installed:', version)
+	    nodeDir = path.resolve(gyp.devDir, version)
+	    createBuildDir()
+	})
       } else {
-        // if no --target was specified then use the current host node version
-        versionStr = process.version
-        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', versionStr)
+	// if no --target was specified then use RPM-installed headers
+	log.verbose('get node dir', 'no --target version specified, falling back to     RPM installed headers')
+	nodeDir = '/opt/rh/nodejs010/root/usr/share/node'
+	createBuildDir()
       }
-
-      // make sure we have a valid version
-      try {
-        version = semver.parse(versionStr)
-      } catch (e) {
-        return callback(e)
-      }
-      if (!version) {
-        return callback(new Error('Invalid version number: ' + versionStr))
-      }
-
-      // ensure that the target node version's dev files are installed
-      gyp.opts.ensure = true
-      gyp.commands.install([ versionStr ], function (err, version) {
-        if (err) return callback(err)
-        log.verbose('get node dir', 'target node version installed:', version)
-        nodeDir = path.resolve(gyp.devDir, version)
-        createBuildDir()
-      })
     }
   }
 
@@ -298,7 +297,8 @@ function configure (gyp, argv, callback) {
 
     // this logic ported from the old `gyp_addon` python file
     var gyp_script = '/opt/rh/v8314/root/usr/bin/gyp'
-    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi')
+    var addon_gypi_file = gyp.opts.target || gyp.opts.nodeDir ? 'addon.gypi' : 'addon-rpm.gypi'
+    var addon_gypi = path.resolve(__dirname, '..', addon_gypi_file)
     var common_gypi = path.resolve(nodeDir, 'common.gypi')
     var output_dir = 'build'
     if (win) {
-- 
1.8.3.1

